// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: node.sql

package db

import (
	"context"
	"database/sql"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (
    namespace, name, image, cmd, container_id
) VALUES (
    ?, ?, ?, ?, ?
)
ON CONFLICT DO UPDATE SET
    image = excluded.image,
    cmd = excluded.cmd,
    container_id = excluded.container_id,
    deleted_at = NULL,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, namespace, name, image, cmd, container_id, deleted_at, created_at, updated_at
`

type CreateNodeParams struct {
	Namespace   string
	Name        string
	Image       string
	Cmd         string
	ContainerID sql.NullString
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode,
		arg.Namespace,
		arg.Name,
		arg.Image,
		arg.Cmd,
		arg.ContainerID,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Namespace,
		&i.Name,
		&i.Image,
		&i.Cmd,
		&i.ContainerID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNode = `-- name: GetNode :one
SELECT id, namespace, name, image, cmd, container_id, deleted_at, created_at, updated_at FROM nodes
WHERE namespace = ? AND name = ? AND deleted_at IS NULL
`

type GetNodeParams struct {
	Namespace string
	Name      string
}

func (q *Queries) GetNode(ctx context.Context, arg GetNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNode, arg.Namespace, arg.Name)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Namespace,
		&i.Name,
		&i.Image,
		&i.Cmd,
		&i.ContainerID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodeWithDeleted = `-- name: GetNodeWithDeleted :one
SELECT id, namespace, name, image, cmd, container_id, deleted_at, created_at, updated_at FROM nodes
WHERE namespace = ? AND name = ?
`

type GetNodeWithDeletedParams struct {
	Namespace string
	Name      string
}

func (q *Queries) GetNodeWithDeleted(ctx context.Context, arg GetNodeWithDeletedParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeWithDeleted, arg.Namespace, arg.Name)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Namespace,
		&i.Name,
		&i.Image,
		&i.Cmd,
		&i.ContainerID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNodes = `-- name: ListNodes :many
SELECT id, namespace, name, image, cmd, container_id, deleted_at, created_at, updated_at FROM nodes
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, listNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Namespace,
			&i.Name,
			&i.Image,
			&i.Cmd,
			&i.ContainerID,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNodesWithDeleted = `-- name: ListNodesWithDeleted :many
SELECT id, namespace, name, image, cmd, container_id, deleted_at, created_at, updated_at FROM nodes
ORDER BY created_at DESC
`

func (q *Queries) ListNodesWithDeleted(ctx context.Context) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, listNodesWithDeleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Namespace,
			&i.Name,
			&i.Image,
			&i.Cmd,
			&i.ContainerID,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteNode = `-- name: SoftDeleteNode :exec
UPDATE nodes
SET deleted_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE namespace = ? AND name = ? AND deleted_at IS NULL
`

type SoftDeleteNodeParams struct {
	Namespace string
	Name      string
}

func (q *Queries) SoftDeleteNode(ctx context.Context, arg SoftDeleteNodeParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteNode, arg.Namespace, arg.Name)
	return err
}

const updateNode = `-- name: UpdateNode :exec
UPDATE nodes
SET image = ?, cmd = ?, container_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE namespace = ? AND name = ? AND deleted_at IS NULL
`

type UpdateNodeParams struct {
	Image       string
	Cmd         string
	ContainerID sql.NullString
	Namespace   string
	Name        string
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) error {
	_, err := q.db.ExecContext(ctx, updateNode,
		arg.Image,
		arg.Cmd,
		arg.ContainerID,
		arg.Namespace,
		arg.Name,
	)
	return err
}
